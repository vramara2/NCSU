module multiplier(reset_b, clk, w_read_address, x_read_address, w_read_data, x_read_data, dut_busy, g_out, matrix_row_done);

input reset_b, clk, dut_busy;
input [15:0] x_read_data, w_read_data;
output [11:0] x_read_address;
output [11:0] w_read_address;
//output computation_done;
output matrix_row_done;
reg [11:0] x_read_address = 12'd0;
reg [11:0] w_read_address = 12'd0;
reg [7:0] multiplier_computation;
//reg computation_done;
reg [18:0] g_out;
reg [4:0] matrix_count = 0;
reg [31:0] c;
reg [15:0] d;
reg matrix_row_done;

always @(posedge clk)
begin
  if(!reset_b)
  begin
    g_out <= 0;
  end
  else if(dut_busy && (matrix_count == 5'd0 && matrix_row_done == 0) && multiplier_computation != 4095) //only initially matrix count will be 0//
  begin
    x_read_address <= 12'd0;
    w_read_address <= 12'd0;
    g_out <= 0; 
  end
  else if(dut_busy && matrix_count == 5'd15 && multiplier_computation != 4095)
  begin
    x_read_address <= 12'd0;
    w_read_address <= w_read_address + 1'b1;
    g_out <= gout + d; //check!!! because at row done this value should be passed to the tanh interpolation module and then cleared.
  end
  else if(dut_busy && ((matrix_count != 5'd0 || matrix_count != 1) && matrix_row_done == 0) && multiplier_computation != 4095)
  begin
    x_read_address <= x_read_address + 1'b1;
    w_read_address <= w_read_address + 1'b1;
    g_out <= g_out + d;
  end
  else if(dut_busy && (matrix_count == 5'd1 && matrix_row_done == 0) && multiplier_computation != 4095)
  begin
    x_read_address <= x_read_address + 1'b1;
    w_read_address <= w_read_address + 1'b1;
    g_out <= d;
  end
end

always @(x_read_data or w_read_data or reset)
begin
  if(!reset_b)
  begin
    c = 0;
    d = 0;
    matrix_count = 0;
    multiplier_computation = 0; 
  end
  else
  begin
    if(matrix_count == 5'd16)
    begin
      matrix_count = 5'd0;
      matrix_row_done = 1'b0;
    end
    c = x_read_data * w_read_data;
    d = c[31:16];
    matrix_count = matrix_count + 1'b1;
    if(matrix_count == 5'd16) 
    begin
      matrix_row_done = 1'b1;
    end
    multiplier_computation = multiplier_computation + 1'b1;
  end
end
endmodule
